# Run Bellman Ford's algorithm to detect negative cycle
# V - the number of vertices
# S - the id of the starting node
# D - an array of size V that tracks the best distance from S to each node
for (i = 0; i < V - 1, i = i + 1):
  D[i] = ∞
D[S] = 0

for (i = 0; i < V - 1, i = i + 1):
  for edge in graph.edges:
    // Relax edge (update D with shorter path)
    if (D[edge.from] + edge.cost < D[edge.to]
      D[edge.to] = D[edge.from] + edge.cost

// Repeat to find nodes caught in a negative cycle
for (i = 0; i < V - 1; i = i + 1):
  for edge in graph.edges:
    if (D[edge.from] + edge.cost < D[edge.to])
      D[edge.to] = -∞
