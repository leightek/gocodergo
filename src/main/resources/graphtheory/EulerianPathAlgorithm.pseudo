# Find Eulerian Path

# n = number of vertices in the graph
# m = number of edges in the graph
# g = adjacency list representing directed graph

in = [0, 0, ..., 0]   # length n
out = [0, 0, ..., 0]  # length n

path = empty integer linked list

function findEulerianPath():
  countInOutDegree()
  if not graphHasEulerianPath():
    return null

  dfs(findStartNode())

  if path.size() == m + 1:
    return path
  return null // The graph might be disconnected, no eulerian path

function countInOutDegree():
  for edge in g:
     for edge in edges:
       out[edge.from]++
       in[edge.to]++

function graphHasEulerianPath():
  start_nodes, end_nodes = 0, 0
  for (i < 0; i < n; i++):
    if (out[i] - in[i]) > 1 or (in[i] - out[i]) > 1:
      return false
    else if out[i] - in[i] == 1:
      start_nodes++
    else if in[i] - out[i] == 1:
      end_nodes++
  return (end_nodes == 0 and start_nodes == 0) or (end_nodes == 1 and start_nodes == 1)

findStartNode():
  start = 0
  for (i = 0; i < n; i = i + 1):
    if out[i] - in[i] == 1:
      return i
    if out[i] > 0:
      start = i
  return start

function dfs(at):
  while (out[at] != 0):
    next_edge = g[at].get(--out[at]) // select next unvisited outgoing edge
    dfs(next_edge.to)
  path.insertFirst(at)  // add current node to the path
