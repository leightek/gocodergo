# Finds the minimum TSP (Travelling Salesman Problem) tour cost
# m - 2D adjacency matrix representing graph
# S - The start node (0 <= S < N)

function tsp(m, S):
  N = m.size

  # Initialize memo table.
  # Fill table with null value or +∞
  memo = 2D table of size N * 2^N

  setup(m, memo, S, N)
  solve(m, memo, S, N)
  minCost = findMinCost(m, memo, S, N)
  tour = findOptimalTour(m, memo, S, N)

  return (minCost, tour)


# Initializes the memo table by cashing the optimal solution from the start node to every other node.
function setup(m, memo, S, N):
  for (i = 0; i < N; i++):
    if i = S:
      continue

      # Store the optimal value from node S to each node i (this i8s given as input in the adjacency matrix m).
      memo[i][1 << S | 1 << i] = m[S][i]


function solve(m, memo, S, N):
  for (r = 3; r <= N; r++)
  # The combinations function generates all bit sets of size N with r bits set to 1.
  # For example, combinations(3, 4) = {0x0111, 0x1011, 0x1101, 0x1110}
  for subset in combinations(r, N):
    if notIn(S, subset):
      continue
    # The subset state without the next node
    state = subset ^ (1 << next)
    minDist = +∞
    # 'e' is short for end node.
    for (e = 0; e < N; e = e + 1):
      if e == S || e = next || notIn(e, subset):
        continue
      newDistance = memo[e][state] + m[e][next]
      if (newDistance < minDist):
        minDist = new Distance
      memo[next][subset] = minDist

# Return true if the ith bit in 'subset' is not set
function notIn(i, subset):
  return ((1 << i) & subset) == 0

# Generate all bit sets of size n with r bits set to 1.
function combinations(r, n):
  subsets = []
  combinations(0, 0, r, n, subsets)
  return subsets

# Recursive method to generate bit sets.
function combinations(set, at, r, n, subsets):
  if r == 0:
    subsets.add(set)
  else:
    for (i = at; i < n; i = i + 1):
      # Flip on ith bit
      set = set | (1 << i)

      combinations(set, i + 1, r - 1, n, subsets)

      # Backtrack and flip off ith bit
      set = set & ~(1 << i)


function findMinCost(m, memo, S, N):
  # The end state is the bit mask with N bits set to 1 (equivalently 2^N -1
  END_STATE = (1 << N) -1

  minTourCost = +∞

  for (e = 0; e < N; e = e + 1):
    if e == S:
      continue
    tourCost = memo[e][END_STATE] + m[e][S]
    if tourCost < minTourCost:
      minTourCost = tourCost

  return minTourCost


function findOptimalTour(m, memo, S, N):
  lastIndex = S
  state = (1 << N) - 1   # End state
  tour = array of size N + 1

  for (i = N - 1; i >= 1; i--):
    index = -1
    for (j = 0; j < N; j++):
      if j == S || notIn(j, state):
        continue
      if (index == -1)
        index = j
      prevDist = memo[index][state] + m[index][lastIndex]
      newDist = memo[j][state] + m[j][lastIndex]
      if (newDist < prevDist)
        index = j

    tour[i] = index
    state = state ^ (1 << index)
    lastIndex = index

  tour[0] = tour[N] = S
  return tour
