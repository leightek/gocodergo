# n = size of the adjacency matrix
# dp = the memo table that will contain APSP solution
# next = matrix used to reconstruct shortest paths

function floydWarshall(m):
  setup(m)

  # Execute algorithm
  for(k := 0; k < n; k++):
    for(i := 0; i < n; i++):
      for(j := 0; j < n; j++):
        if(dp[i][k] + dp[k][j] < dp[i][j]):
          dp[i][j] = dp[i][k] + dp[k][j]
          next[i][j] = next[i][k]

  # Detect and propagate negative cycles
  propagateNegativeCycles(dp, n)

  # Return APSP matrix
  return dp


function setup(m):
  dp = empty matrix of size n x n

  # Should contain null value by default
  next = empty integer matrix of size n x n

  # Do a deep copy of the input matrix and setup the 'next' matrix for path reconstruction
  for(i := 0; i < n; i++):
    for(j := 0; j < n; j++):
      db[i][j] = m[i][j]
      if m[i][j] != +∞:
        next[i][j] = j


function propagateNegativeCycles(dp, n):

  # Execute the algorithm a second time, set the distance to be -∞ if the distance can be improved
  for(k := 0; k < n; k++):
     for(i :=0; i < n; i++)
       for(j := 0; j < n; j++):
         if(dp[i][k] + dp[k][j] < dp[i][j]:
           dp[i][j] = -∞
           next[i][j] = -1


function reconstructPath(start, end):
  path = []

  if dp[start][end] == +∞:
    return path

  at: = start
  for(; at != end; at = next[at][end]):
    if at == -1:
      return null
    path.add(at)

  if next[at][end] == -1:
    return null
  path.add(end)
  return path

