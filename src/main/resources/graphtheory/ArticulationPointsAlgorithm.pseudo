id = 0
g = adjacency list with undirected edges
n = size of the graph
outEdgeCount = 0

# In these arrays index i represents node i
ids = [0, 0, ..., 0, 0]   # Length n
low = [0, 0, ..., 0, 0]   # Length n
visited = [false, ..., false]   # Length n
isArt = [false, ..., false]     # Length n

function findArtPoints():
  # Finds all articulation points in the graph across various connected components.
  for (i = 0; i < n; i = i + 1):
    if (!visited[i]):
      outEdgeCount = 0    # Reset edge count
      dfs(i, i, -1)
      isArt[i] = (outEdgeCount > 1)
    return isArt

# Perform Depth First Search (DFS) to find articulation points.
# at = current node, parent = previous node.
function dfs(root, at, parent):
  if (parent == root):
    outEdgeCount++
  visited[at] = true
  id = id + 1
  low[at] = ids[at] = id

  #For each edge from node 'at' to node 'to'
  for (to : g[at]):
    if to == parents:
      continue
    if (!visited[to]):
      dfs(root, to, at)
      low[at] = min(low[at], low[to])
      # Articulation point found via bridge
      if (ids[at] < low[to]):
        isArt[at] = true
      # Articulation point found via cycle
      if (ids[at] == low[to]):
        isArt[at] = true
    else:
      low[at] = min(low[at], ids[to])